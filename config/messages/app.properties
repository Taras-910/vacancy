app.title=Search for IT vacancies
app.footer=An application based on the example of

user.name=name
user.email=email
user.roles=roles
user.active=active
user.registered=registered

vacancy.vacancy=Vacancy
vacancy.employer=Company
vacancy.address=City
vacancy.employer_=company name
vacancy.address_=city
vacancy.from=from
vacancy.to=to $
vacancy.skills=Skills
vacancy.date=Date
vacancy.language=Programming language
vacancy.language_=programming language
vacancy.level=Level
vacancy.workplace=Workplace
vacancy.vew_vacancy= New vacancy
vacancy.refresh_db=Refresh DB

vacancy.vacancy_name=Vacancy name
vacancy.vacancy_name_=vacancy name
vacancy.from_cent=from (usd cent)
vacancy.to_cent=to (usd cent)
vacancy.from_cent_=salary min (usd cent)
vacancy.to_cent_=salary max (usd cent)
vacancy.url=url
vacancy.skills_knowledge_experience=Skills, knowledge, experience...
vacancy.skills_knowledge_experience_=required skills, knowledge, experience...
vacancy.refresh_db_by=Refresh DB by datas:
vacancy.please_enter=please enter any
vacancy.please_enter_workplace=please enter the place of work you need
vacancy.select_or_print_your=select or print your
vacancy.print=print pls
vacancy.workplace_=workplace
vacancy.filter=Filter
vacancy.wait=DB loading... wait 1-2 min...after 2 min set  
vacancy.refresh=Refresh

vacancy.kyiv=Kyiv

common.add=Add
common.back=Reset
common.save=Save
common.edit=Edit
common.you_sure='Are you sure?'

body_header.profile=Profile
body_header.users=Users
body_header.title=NEW programmer vacancies

login.stack=Technologies stack: 
login.registration=Registration &raquo;
login.as_admin=Log-in as Admin
login.as_user=Log-in as User
login.project=Java Enterprise project
login.body=with registration/authorization and role-based access rights (USER, ADMIN).<br/>Administrator can create/edit/delete users and vacancies, users can manage their profile via UI (via AJAX) and REST interface with basic authorization. Vacancies can be filtered/updated/marked (line color changes, individual choice is stored in the database).<br/>REST and all services are covered by JUnit tests using Spring MVC Test and Spring SecurityTest.<br/> HSQLDB is used for tests. Actual vacancies are stored in PostgreSQL (or H2DB), updated from resources:<br/>
login.doc=Documentation

password.password=Password :
password.confirm=Confirm :
exception.error_data=Data Validation Error

profile.profile=Profile
profile.register=Register
